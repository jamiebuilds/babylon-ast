// @flow
import * as types from '../types';

export default {
  ArrayExpression: ["elements"],
  BinaryExpression: ["operator", "left", "right"],
  AssignmentExpression: ["operator", "left", "right"],
  LogicalExpression: ["operator", "left", "right"],
  MemberExpression: ["object", "property", "computed"],
  BindExpression: ["object", "callee"],
  BlockStatement: ["body", "directives"],
  CallExpression: ["callee", "arguments"],
  NewExpression: ["callee", "arguments"],
  Super: [],
  ClassBody: ["body"],
  ClassMethod: ["kind", "key", "params", "body", "computed", "static"],
  ClassProperty: ["key", "value", "typeAnnotation", "decorators", "computed"], // <<<<< weird ordering
  ClassDeclaration: ["id", "superClass", "body", "decorators"],
  ClassExpression: ["id", "superClass", "body", "decorators"],
  ConditionalExpression: ["test", "consequent", "alternate"],
  ReturnStatement: ["argument"],
  LabeledStatement: ["label", "body"],
  BreakStatement: ["label"],
  ContinueStatement: ["label"],
  IfStatement: ["test", "consequent", "alternate"],
  SwitchStatement: ["discriminant", "cases"],
  SwitchCase: ["test", "consequent"],
  DebuggerStatement: [],
  Decorator: ["expression"],
  AssignmentPattern: ["left", "right"],
  ArrayPattern: ["elements", "typeAnnotation"],
  ObjectPattern: ["properties", "typeAnnotation"],
  Directive: ["value"],
  DirectiveLiteral: ["value"],
  DoExpression: ["body"],
  ThrowStatement: ["argument"],
  TryStatement: ["block", "handler", "finalizer"],
  CatchClause: ["param", "body"],
  TypeAliasDeclaration: ["id", "typeParameters", "right"],
  TypeCastExpression: ["expression", "typeAnnotation"],
  ClassImplements: ["id", "typeParameters"],
  DeclareVariable: ["id", "typeAnnotation"],
  DeclareFunction: ["id", "typeParameters", "params", "rest", "returnType"],
  DeclareClass: ["id", "typeParameters", "extends", "mixins", "body"],
  DeclareInterface: ["id", "typeParameters", "extends", "mixins", "body"],
  DeclareTypeAlias: ["id", "typeParameters", "right"],
  DeclareModule: ["name", "body"],
  DeclareExport: ["default", "declaration", "specifiers", "source"],
  DeclareModuleExports: ["typeAnnotation"],
  ExistentialTypeAnnotation: [],
  FunctionTypeAnnotation: ["typeParameters", "params", "rest", "returnType"],
  FunctionTypeParam: ["id", "typeAnnotation", "optional"],
  GenericTypeAnnotation: [],
  TypeParameterInstantiation: [],
  TypeParameterDeclaration: [],
  TypeParameter: [],
  InterfaceDeclaration: [],
  InterfaceExtends: [],
  InterfaceTypeAnnotation: [],
  NullLiteralTypeAnnotation: [],
  VoidLiteralTypeAnnotation: [],
  BooleanLiteralTypeAnnotation: [],
  NumericLiteralTypeAnnotation: [],
  QualifiedTypeIdentifier: [],
  ObjectTypeAnnotation: [],
  ObjectTypeProperty: [],
  ObjectTypeMethod: [],
  ObjectTypeIndexer: [],
  AnyTypeAnnotation: [],
  MixedTypeAnnotation: [],
  EmptyTypeAnnotation: [],
  BooleanTypeAnnotation: [],
  StringTypeAnnotation: [],
  NumberTypeAnnotation: [],
  ThisTypeAnnotation: [],
  TupleTypeAnnotation: [],
  NullableTypeAnnotation: [],
  ArrayTypeAnnotation: [],
  TypeofTypeAnnotation: [],
  UnionTypeAnnotation: [],
  Variance: [],
  FunctionDeclaration: [],
  FunctionExpression: [],
  ArrowFunctionExpression: [],
  YieldExpression: [],
  AwaitExpression: ["argument"],
  Identifier: ["name", "typeAnnotation"],
  JSXAttribute: ["name", "value"],
  JSXClosingElement: ["name"],
  JSXElement: ["openingElement", "closingElement", "children", "selfClosing"],
  JSXEmptyExpression: [],
  JSXExpressionContainer: ["expression"],
  JSXSpreadChild: ["expression"],
  JSXIdentifier: ["name"],
  JSXMemberExpression: ["object", "property"],
  JSXNamespacedName: ["namespace", "name"],
  JSXOpeningElement: ["name", "attributes", "selfClosing"],
  JSXSpreadAttribute: ["argument"],
  JSXText: ["value"],
  RegExpLiteral: ["pattern", "flags"],
  NullLiteral: [],
  StringLiteral: ["value"],
  BooleanLiteral: ["value"],
  NumericLiteral: ["value"],
  WhileStatement: ["test", "body"],
  DoWhileStatement: ["test", "body"],
  ForStatement: ["init", "test", "update", "body"],
  ForInStatement: ["left", "right", "body"],
  ForOfStatement: ["left", "right", "body"],
  MetaProperty: ["meta", "property"],
  ExpressionStatement: ["expression"],
  SequenceExpression: ["expressions"],
  EmptyStatement: [],
  Import: [],
  ImportDeclaration: ["specifiers", "source"],
  ImportSpecifier: ["local", "imported"],
  ImportDefaultSpecifier: ["local"],
  ImportNamespaceSpecifier: ["local"],
  ExportNamedDeclaration: ["declaration", "specifiers", "source"],
  ExportSpecifier: ["local", "exported"],
  ExportDefaultSpecifier: ["exported"],
  ExportNamespaceSpecifier: ["exported"],
  ExportDefaultDeclaration: ["declaration"],
  ExportAllDeclaration: ["source"],
  ObjectExpression: ["properties"],
  ObjectProperty: ["key", "value", "computed", "shorthand", "decorators"],
  ObjectMethod: ["kind", "key", "params", "body", "computed"],
  Program: ["body", "directives"],
  RestElement: ["argument", "typeAnnotation"],
  SpreadElement: ["argument"],
  TemplateLiteral: ["quasis", "expressions"],
  TaggedTemplateExpression: ["tag", "quasi"],
  TemplateElement: ["value", "tail"],
  ThisExpression: [],
  UnaryExpression: ["operator", "argument", "prefix"],
  UpdateExpression: ["operator", "argument", "prefix"],
  VariableDeclaration: ["kind", "declarations"],
  VariableDeclarator: ["id", "init"],
  WithStatement: ["object", "body"],
};
